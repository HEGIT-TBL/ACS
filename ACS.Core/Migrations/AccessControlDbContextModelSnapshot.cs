// <auto-generated />
using System;
using ACS.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ACS.Core.Migrations
{
    [DbContext(typeof(AccessControlDbContext))]
    partial class AccessControlDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccessPointKeyCard", b =>
                {
                    b.Property<Guid>("AllowedKeyCardsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AvailableAccessPointsId")
                        .HasColumnType("uuid");

                    b.HasKey("AllowedKeyCardsId", "AvailableAccessPointsId");

                    b.HasIndex("AvailableAccessPointsId");

                    b.ToTable("AccessPointKeyCard");
                });

            modelBuilder.Entity("ACS.Core.Models.AccessPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("AccessPointType")
                        .HasColumnType("integer")
                        .HasColumnName("AccessPointType");

                    b.Property<string>("ControllerIP")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ControllerIP");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Location");

                    b.HasKey("Id");

                    b.ToTable("AccessPoints");
                });

            modelBuilder.Entity("ACS.Core.Models.Camera", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("AccessPointId")
                        .HasColumnType("uuid");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Location");

                    b.Property<string>("StreamLink")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("StreamLink");

                    b.HasKey("Id");

                    b.HasIndex("AccessPointId");

                    b.ToTable("Cameras");
                });

            modelBuilder.Entity("ACS.Core.Models.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("CarModel")
                        .HasColumnType("text")
                        .HasColumnName("CarModel");

                    b.Property<string>("CarNumberPlate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CarNumberPlate");

                    b.Property<string>("Color")
                        .HasColumnType("text")
                        .HasColumnName("Color");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("ACS.Core.Models.Events.AccessEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("AccessPointId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AccessTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CaptureTime");

                    b.Property<bool>("IsPermissionGranted")
                        .HasColumnType("boolean")
                        .HasColumnName("IsPermissionGranted");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AccessPointId");

                    b.HasIndex("UserId");

                    b.ToTable("AccessEvents");
                });

            modelBuilder.Entity("ACS.Core.Models.Events.FaceRecognizedEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("CameraId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CaptureTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CaptureTime");

                    b.Property<double>("Probability")
                        .HasColumnType("double precision")
                        .HasColumnName("Probability");

                    b.Property<Guid?>("RecognizedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CameraId");

                    b.HasIndex("RecognizedUserId");

                    b.ToTable("FaceRecognizedEvents");
                });

            modelBuilder.Entity("ACS.Core.Models.Events.ParkingLotStateChangedEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("ChangedLotId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StateChangeTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("StateChangeTime");

                    b.HasKey("Id");

                    b.HasIndex("ChangedLotId");

                    b.ToTable("ParkingLotStateChangedEvents");
                });

            modelBuilder.Entity("ACS.Core.Models.Identifier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<float[]>("FacePoints")
                        .HasColumnType("real[]")
                        .HasColumnName("FacePoints");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("bytea")
                        .HasColumnName("Photo");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Identifiers");
                });

            modelBuilder.Entity("ACS.Core.Models.KeyCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ExpirationDate");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("KeyCardId");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("KeyCards");
                });

            modelBuilder.Entity("ACS.Core.Models.ParkingLot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("LotNumber")
                        .HasColumnType("integer")
                        .HasColumnName("LotNumber");

                    b.Property<Guid?>("PlacedCarId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("State");

                    b.HasKey("Id");

                    b.HasIndex("PlacedCarId");

                    b.ToTable("ParkingLots");
                });

            modelBuilder.Entity("ACS.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text")
                        .HasColumnName("Patronymic");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("bytea")
                        .HasColumnName("ProfilePicture");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Surname");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AccessPointKeyCard", b =>
                {
                    b.HasOne("ACS.Core.Models.KeyCard", null)
                        .WithMany()
                        .HasForeignKey("AllowedKeyCardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ACS.Core.Models.AccessPoint", null)
                        .WithMany()
                        .HasForeignKey("AvailableAccessPointsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ACS.Core.Models.Camera", b =>
                {
                    b.HasOne("ACS.Core.Models.AccessPoint", "AccessPoint")
                        .WithMany("Cameras")
                        .HasForeignKey("AccessPointId");

                    b.Navigation("AccessPoint");
                });

            modelBuilder.Entity("ACS.Core.Models.Car", b =>
                {
                    b.HasOne("ACS.Core.Models.User", null)
                        .WithMany("OwnedCars")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ACS.Core.Models.Events.AccessEvent", b =>
                {
                    b.HasOne("ACS.Core.Models.AccessPoint", "AccessPoint")
                        .WithMany()
                        .HasForeignKey("AccessPointId");

                    b.HasOne("ACS.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("AccessPoint");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ACS.Core.Models.Events.FaceRecognizedEvent", b =>
                {
                    b.HasOne("ACS.Core.Models.Camera", "Camera")
                        .WithMany()
                        .HasForeignKey("CameraId");

                    b.HasOne("ACS.Core.Models.User", "RecognizedUser")
                        .WithMany()
                        .HasForeignKey("RecognizedUserId");

                    b.Navigation("Camera");

                    b.Navigation("RecognizedUser");
                });

            modelBuilder.Entity("ACS.Core.Models.Events.ParkingLotStateChangedEvent", b =>
                {
                    b.HasOne("ACS.Core.Models.ParkingLot", "ChangedLot")
                        .WithMany()
                        .HasForeignKey("ChangedLotId");

                    b.Navigation("ChangedLot");
                });

            modelBuilder.Entity("ACS.Core.Models.Identifier", b =>
                {
                    b.HasOne("ACS.Core.Models.User", null)
                        .WithMany("Identifiers")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ACS.Core.Models.KeyCard", b =>
                {
                    b.HasOne("ACS.Core.Models.User", "Owner")
                        .WithMany("KeyCards")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ACS.Core.Models.ParkingLot", b =>
                {
                    b.HasOne("ACS.Core.Models.Car", "PlacedCar")
                        .WithMany()
                        .HasForeignKey("PlacedCarId");

                    b.Navigation("PlacedCar");
                });

            modelBuilder.Entity("ACS.Core.Models.AccessPoint", b =>
                {
                    b.Navigation("Cameras");
                });

            modelBuilder.Entity("ACS.Core.Models.User", b =>
                {
                    b.Navigation("Identifiers");

                    b.Navigation("KeyCards");

                    b.Navigation("OwnedCars");
                });
#pragma warning restore 612, 618
        }
    }
}
